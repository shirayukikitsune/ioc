#pragma once

#include <algorithm>
#include <exception>
#include <list>
#include <memory>
#include <string>
#include <unordered_map>

namespace kitsune::ioc {

    ///! Provides access to the managed services
    /// This class is the core of this IoC implementation.
    /// Services will register themselves here
    template <class BaseServiceType>
    class Injector {
    private:
        typedef std::vector<std::shared_ptr<BaseServiceType>> RepositoryType;

        std::shared_ptr<BaseServiceType> PrimaryService;
        RepositoryType ServiceRepository;

        Injector() noexcept = default;
        Injector(const Injector&) = delete;

        std::string getPrimaryRegisteredMessage() {
            return std::string("Service ") + BaseServiceType::getClassName() + std::string(" already registered as primary");
        }

    public:
        static Injector& getInstance() {
            static auto instance = new Injector;
            return *instance;
        }

        void addPrimaryService(std::shared_ptr<BaseServiceType> && Service) {
            if (PrimaryService) {
                throw std::logic_error(getPrimaryRegisteredMessage().data());
            }

            addService(Service);

            PrimaryService = std::move(Service);
        }

        void addPrimaryServicePointer(BaseServiceType* Service) {
            auto Pointer = std::shared_ptr<BaseServiceType>(Service);

            addPrimaryService(std::move(Pointer));
        }

        void addService(std::shared_ptr<BaseServiceType> Service) {
            ServiceRepository.emplace_back(Service);
        }

        void addServicePointer(BaseServiceType* Service) {
            ServiceRepository.emplace_back(std::shared_ptr<BaseServiceType>(Service));
        }

        void removePrimaryService(BaseServiceType* Service) {
            PrimaryService.reset();
            removeService(Service);
        }

        void removeService(BaseServiceType* Service) {
            for (auto i = ServiceRepository.begin(), End = ServiceRepository.end(); i != End; ++i) {
                if (i->get() == Service) {
                    ServiceRepository.erase(i);
                    return;
                }
            }
        }

        template <typename ImplementationType = BaseServiceType>
        std::weak_ptr<ImplementationType> findService() noexcept {
            auto ImplementationPointer = std::dynamic_pointer_cast<ImplementationType, BaseServiceType>(PrimaryService);

            if (ImplementationPointer) {
                return ImplementationPointer;
            }

            return findAnyService<ImplementationType>();
        }

        template <typename ImplementationType = BaseServiceType>
        std::weak_ptr<ImplementationType> findAnyService() {
            auto Services = findServices<ImplementationType>();

            if (Services.size() > 0) {
                return Services.front();
            }

            return std::weak_ptr<ImplementationType>();
        }

        template <typename ImplementationType = BaseServiceType>
        std::list<std::weak_ptr<ImplementationType>> findServices() {
            std::list<std::weak_ptr<ImplementationType>> Services;

            std::for_each(ServiceRepository.begin(), ServiceRepository.end(), [&Services](auto i) {
                auto Pointer = std::dynamic_pointer_cast<ImplementationType, BaseServiceType>(i);

                if (Pointer) {
                    Services.emplace_back(Pointer);
                }
            });

            return Services;
        }
    };

    template <typename T, typename U = T>
    class Injectable {
        std::weak_ptr<U> InjectedService;

    public:
        Injectable() noexcept {
            reset();
        }

        void reset() noexcept {
            InjectedService = Injector<T>::getInstance().template findService<U>();
        }

        template<class _T = U,
            std::enable_if_t<!std::is_array_v<_T>, int> = 0>
        T* operator -> () {
            return InjectedService.lock().get();
        }

        template<class _T = U,
            std::enable_if_t<std::is_array_v<_T>, int> = 0>
            T& operator[](ptrdiff_t i) {
            return InjectedService.lock()[i];
        }

        explicit operator bool() const noexcept
        {
            return !InjectedService.expired();
        }
    };

}

